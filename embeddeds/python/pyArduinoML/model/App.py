__author__ = 'pascalpoizat'

from pyArduinoML.model.NamedElement import NamedElement
from pyArduinoML.model.Monitor import Monitor

class App(NamedElement):
    """
    Application built over bricks.

    """

    def __init__(self, name: str, bricks: tuple=(), modes: tuple=(), monitor: Monitor=None):
        """
        Constructor.

        :param name: String, the name of the application
        :param bricks: List[Brick], bricks over which the application operates
        :param states: List[State], states of the application with the first one being the initial state
        :return:
        """
        NamedElement.__init__(self, name)
        self.bricks: tuple = bricks
        self.modes: tuple = modes
        self.monitor: Monitor = monitor

    def __repr__(self):
        """
        External representation: Arduino program

        :return: String
        """
        rtr = """// generated by ArduinoML

        #include <Arduino.h>
#include <wiring_private.h>
#include <pins_arduino.h>


%s

void setup() { %s """ % ("\n".join(map(lambda b: b.declare(), self.bricks)),
                        "\n".join(map(lambda b: b.setup(), self.bricks)))

        if self.monitor is not None:
            rtr += self.monitor.setup()

        rtr += """
        
        }

void (*functionPtr)() = mode_%s;
int state = LOW; int prev = HIGH;
char str[4];
long time = 0; long timeLastDebug = 0;long debounce = 200;

%s
void loop() { (*functionPtr)(); if (millis() - timeLastDebug > 10) {""" % (self.modes[0].name,
                                  "\n".join(map(lambda m: m.setup(), self.modes)))


        if self.monitor is not None:
            rtr += self.monitor.loop()
        rtr += "timeLastDebug = millis();}}" 

        rtr += """int digitalReadOutputPin(uint8_t pin)
        {
        uint8_t bit = digitalPinToBitMask(pin);
        uint8_t port = digitalPinToPort(pin);
        if (port == NOT_A_PIN) 
        return LOW;

        return (*portOutputRegister(port) & bit) ? HIGH : LOW;
        }"""

        return rtr
