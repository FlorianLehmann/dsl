__author__ = 'pascalpoizat'

from pyArduinoML.model.NamedElement import NamedElement
from pyArduinoML.model.Monitor import Monitor

class App(NamedElement):
    """
    Application built over bricks.

    """

    def __init__(self, name: str, bricks: tuple=(), modes: tuple=(), monitor: Monitor=None):
        """
        Constructor.

        :param name: String, the name of the application
        :param bricks: List[Brick], bricks over which the application operates
        :param states: List[State], states of the application with the first one being the initial state
        :return:
        """
        NamedElement.__init__(self, name)
        self.bricks: tuple = bricks
        self.modes: tuple = modes
        self.monitor: Monitor = monitor

    def __repr__(self):
        """
        External representation: Arduino program

        :return: String
        """
        rtr = """// generated by ArduinoML

#include <Arduino.h>
#include <wiring_private.h>
#include <pins_arduino.h>


%s

void setup() {
%s """ % ("\n".join(map(lambda b: b.declare(), self.bricks)),
    "\n".join(map(lambda b: '\t' + b.setup(), self.bricks)))

        if self.monitor is not None:
            rtr += '\n\t' + self.monitor.setup()

        rtr += """
}

void (*functionPtr)() = mode_%s;
int state = LOW; int prev = HIGH;
long time = 0; long debounce = 200; long debugger = 0;
String current_mode = String("%s"); String current_state = String("%s");

%s
void loop() {
    (*functionPtr)();
""" % (
    self.modes[0].name,
    self.modes[0].name,
    self.modes[0].states[0].name,
    "\n\t".join(map(lambda m: m.setup(), self.modes)))


        if self.monitor is not None:
            for line in self.monitor.loop().splitlines():
                rtr += '\n\t' + line
        rtr += "\n}" 

        rtr += """

int digitalReadOutputPin(uint8_t pin) {
    uint8_t bit = digitalPinToBitMask(pin);
    uint8_t port = digitalPinToPort(pin);
    if (port == NOT_A_PIN) 
        return LOW;
    return (*portOutputRegister(port) & bit) ? HIGH : LOW;
}"""
        return rtr
